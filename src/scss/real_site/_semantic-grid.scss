/////////////////
// Semantic.gs // for SCSS: http://sass-lang.com/
/////////////////

// Defaults which you can freely override
$column-width: 60px;
$gutter-width: 20px;
$columns: 12;

// Utility function â€” you should never need to modify this
@function gridsystem-width($columns:$columns) {
	@return ($column-width * $columns) + ($gutter-width * ($columns - 1));
}

@function gridsystem-full-width($columns:$columns) {
	@return ($column-width * $columns) + ($gutter-width * ($columns + 1));
}

@function gridsystem-gutter-width($columns:$columns) {
  @return $total-width * ($gutter-width / gridsystem-width($columns));
}

@function gridsystem-gutter-full-width($columns:$columns) {
  @return $total-width * ($gutter-width / gridsystem-full-width($columns));
}

@function gridsystem-gutter-height($columns:$columns) {
  @return gridsystem-gutter-width();
}

@function gridsystem-gutter-width-vw($columns:$columns) {
  $result: gridsystem-gutter-width($columns);
  @return #{$result / ($result * 0 + 1)}vw;
}

@function gridsystem-column-width($x, $columns:$columns) {
  @return $total-width*(((($gutter-width+$column-width)*$x) - $gutter-width) / gridsystem-width($columns));
}

@function gridsystem-column-full-width($x, $columns:$columns) {
  @return $total-width*(((($gutter-width+$column-width)*$x) - $gutter-width) / gridsystem-full-width($columns));
}

@function gridsystem-column-width-vw($x, $columns:$columns) {
  $result: gridsystem-column-width($x, $columns);
  @return #{$result / ($result * 0 + 1)}vw;
}

// Set $total-width to 100% for a fluid layout
$total-width: gridsystem-width($columns);

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;


//////////
// GRID //
//////////

body {
	width: 100%;
// 	@include clearfix();
}

@mixin row($local-columns:$columns) {
	display: flex;
  justify-content: space-between;
  box-sizing: border-box;

  @if ($local-columns == $columns) {
    width: $total-width;
    padding-left: $total-width*(($gutter-width / (gridsystem-width($local-columns) + 2 * $gutter-width)));
	  padding-right: $total-width*(($gutter-width / (gridsystem-width($local-columns) + 2 * $gutter-width)));
  }
}

@mixin column($x, $columns:$columns, $in-row:true) {
  @if ($in-row) {
    flex: 0 1 gridsystem-column-width($x, $columns);
  }
  @else {
    flex: 0 1 gridsystem-column-full-width($x, $columns);
  }
}

@mixin push($offset:1) {
	margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

@mixin pull($offset:1) {
	margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

@mixin pad-column-left($columns:$columns) {
  margin-left: gridsystem-gutter-width($columns);
}

@mixin pad-column-right($columns:$columns) {
  margin-right: gridsystem-gutter-width($columns);
}